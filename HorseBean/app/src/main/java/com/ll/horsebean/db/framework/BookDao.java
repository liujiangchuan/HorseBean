package com.ll.horsebean.db.framework;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T_BOOK.
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "T_BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Content_id = new Property(0, String.class, "content_id", true, "CONTENT_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Cover_url = new Property(2, String.class, "cover_url", false, "COVER_URL");
        public final static Property Brief = new Property(3, String.class, "brief", false, "BRIEF");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
    };

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T_BOOK' (" + //
                "'CONTENT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: content_id
                "'NAME' TEXT," + // 1: name
                "'COVER_URL' TEXT," + // 2: cover_url
                "'BRIEF' TEXT," + // 3: brief
                "'AUTHOR' TEXT);"); // 4: author
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T_BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String content_id = entity.getContent_id();
        if (content_id != null) {
            stmt.bindString(1, content_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(3, cover_url);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(4, brief);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // content_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cover_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brief
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // author
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setContent_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCover_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrief(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getContent_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getContent_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
